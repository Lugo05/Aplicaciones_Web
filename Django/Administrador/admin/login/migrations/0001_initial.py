# Generated by Django 3.0.6 on 2020-05-08 16:54

from django.db import migrations, models
import django.db.models.deletion
import login.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Apps',
                'db_table': 'app',
                'ordering': ['-name', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Nationality',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Nationalities',
                'db_table': 'nationality',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Permissions',
                'db_table': 'permission',
                'ordering': ['-name', '-id'],
            },
        ),
        migrations.CreateModel(
            name='PermissionProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('apps', models.ForeignKey(db_column='id_app', on_delete=django.db.models.deletion.CASCADE, to='login.App')),
                ('permissions', models.ForeignKey(db_column='id_permission', on_delete=django.db.models.deletion.CASCADE, to='login.Permission')),
            ],
            options={
                'verbose_name_plural': 'Permissions per Profile',
                'db_table': 'permission_profile',
                'ordering': ['profiles', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Privilege',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('apps', models.ManyToManyField(through='login.PermissionProfile', to='login.App')),
                ('permissions', models.ManyToManyField(through='login.PermissionProfile', to='login.Permission')),
            ],
            options={
                'verbose_name_plural': 'Privileges',
                'db_table': 'privilege',
                'ordering': ['-name', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('apps', models.ManyToManyField(through='login.PermissionProfile', to='login.App')),
                ('permissions', models.ManyToManyField(through='login.PermissionProfile', to='login.Permission')),
                ('privileges', models.ManyToManyField(through='login.PermissionProfile', to='login.Privilege')),
            ],
            options={
                'verbose_name_plural': 'Profiles',
                'db_table': 'profile',
                'ordering': ['-name', '-id'],
            },
        ),
        migrations.AddField(
            model_name='privilege',
            name='profiles',
            field=models.ManyToManyField(through='login.PermissionProfile', to='login.Profile'),
        ),
        migrations.AddField(
            model_name='permissionprofile',
            name='privileges',
            field=models.ForeignKey(db_column='id_privilege', on_delete=django.db.models.deletion.CASCADE, to='login.Privilege'),
        ),
        migrations.AddField(
            model_name='permissionprofile',
            name='profiles',
            field=models.ForeignKey(db_column='id_profile', on_delete=django.db.models.deletion.CASCADE, to='login.Profile'),
        ),
        migrations.AddField(
            model_name='permission',
            name='apps',
            field=models.ManyToManyField(through='login.PermissionProfile', to='login.App'),
        ),
        migrations.AddField(
            model_name='permission',
            name='privileges',
            field=models.ManyToManyField(through='login.PermissionProfile', to='login.Privilege'),
        ),
        migrations.AddField(
            model_name='permission',
            name='profiles',
            field=models.ManyToManyField(through='login.PermissionProfile', to='login.Profile'),
        ),
        migrations.AddField(
            model_name='app',
            name='profiles',
            field=models.ManyToManyField(through='login.PermissionProfile', to='login.Profile'),
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('gender', models.CharField(max_length=1, null=True)),
                ('phone', models.CharField(max_length=50, null=True, unique=True)),
                ('password', models.CharField(max_length=50, validators=[login.validators.validate_password])),
                ('is_active', models.BooleanField(db_column='active', default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('nationality', models.OneToOneField(db_column='id_nationality', null=True, on_delete=django.db.models.deletion.CASCADE, to='login.Nationality')),
                ('profile', models.ForeignKey(db_column='id_profile', null=True, on_delete=django.db.models.deletion.CASCADE, to='login.Profile')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-username', '-id'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='permissionprofile',
            unique_together={('profiles', 'permissions', 'privileges', 'apps')},
        ),
    ]
